# Advent of Code 2022

```elixir
Mix.install([
  {:kino_aoc, github: "ljgago/kino_aoc"}
])
```

## Inputs

<!-- livebook:{"attrs":{"day":"9","session_secret":"AOC_SESSION","variable":"day_9_raw_input","year":"2022"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, day_9_raw_input} = KinoAOC.download_puzzle("2022", "9", System.fetch_env!("LB_AOC_SESSION"))
```

## Day 9

## Day 8

```elixir
# Setup
grid =
  day_8_raw_input
  |> String.split("\n", trim: true)
  |> Enum.map(fn line -> String.split(line, "", trim: true) end)
  |> Enum.map(fn row -> Enum.map(row, &String.to_integer(&1)) end)

grid_map =
  grid
  |> Enum.with_index(1)
  |> Enum.map(fn {row, y_idx} ->
    row |> Enum.with_index(1) |> Enum.map(fn {val, x_idx} -> {{x_idx, y_idx}, val} end)
  end)
  |> List.flatten()
  |> Map.new()

dim_x = length(hd(grid))
dim_y = length(grid)
```

```elixir
# Part One
Enum.count(grid_map, fn {{x, y}, val} ->
  left = Enum.all?(1..(x - 1)//1, fn i -> Map.get(grid_map, {i, y}) < val end)
  right = Enum.all?((x + 1)..dim_x//1, fn i -> Map.get(grid_map, {i, y}) < val end)
  up = Enum.all?(1..(y - 1)//1, fn i -> Map.get(grid_map, {x, i}) < val end)
  down = Enum.all?((y + 1)..dim_y//1, fn i -> Map.get(grid_map, {x, i}) < val end)
  left || right || up || down
end)
```

```elixir
# Part Two
check = fn x, y, val, counter, grid_map ->
  tree = Map.get(grid_map, {x, y})

  case tree < val do
    true -> {:cont, counter + 1}
    false -> {:halt, counter + 1}
  end
end

calc_scenic_score = fn {{x, y}, val}, grid_map ->
  left = Enum.reduce_while((x - 1)..1//-1, 0, fn i, c -> check.(i, y, val, c, grid_map) end)
  right = Enum.reduce_while((x + 1)..dim_x//1, 0, fn i, c -> check.(i, y, val, c, grid_map) end)
  up = Enum.reduce_while((y - 1)..1//-1, 0, fn i, c -> check.(x, i, val, c, grid_map) end)
  down = Enum.reduce_while((y + 1)..dim_y//1, 0, fn i, c -> check.(x, i, val, c, grid_map) end)
  left * right * up * down
end

grid_map
|> Enum.map(fn tree -> calc_scenic_score.(tree, grid_map) end)
|> Enum.sort(:desc)
|> hd()
```

## Day 7

```elixir
# Setup
defmodule Helpers do
  def add_to_path(name, path), do: path ++ [name]

  def add_size(_size, [], sizes), do: sizes

  def add_size(size, path, sizes) do
    str_path = path |> Enum.reverse() |> Enum.join("/")
    sizes = Map.update(sizes, str_path, size, &(&1 + size))
    [_ | path] = path
    add_size(size, path, sizes)
  end
end

day_7_input = String.split(day_7_raw_input, "\n", trim: true)

acc = %{path: ["."], sizes: %{}}

result =
  Enum.reduce(day_7_input, acc, fn arg, %{path: path, sizes: sizes} = acc ->
    case arg do
      "$ cd /" ->
        %{acc | path: ["."]}

      "$ cd .." ->
        [_ | rest] = path
        %{acc | path: rest}

      "$ cd " <> name ->
        %{acc | path: [name | path]}

      "$ ls" ->
        acc

      "dir " <> _name ->
        acc

      file ->
        [size, _name] = String.split(file, " ")
        size = String.to_integer(size)
        sizes = Helpers.add_size(size, path, sizes)
        %{acc | sizes: sizes}
    end
  end)

sizes = Enum.map(result.sizes, fn {_name, size} -> size end)
```

```elixir
# Part One
sizes
|> Enum.filter(&(&1 <= 100_000))
|> Enum.sum()
```

```elixir
# Part Two
total_space = 70_000_000
threshold = 30_000_000

used_space = Enum.max(sizes)
unused_space = total_space - used_space
delta = threshold - unused_space

sizes
|> Enum.filter(&(&1 >= delta))
|> Enum.min_by(&(&1 - delta))
```

## Day 6

```elixir
# Setup
all_different? = fn list, expected_num ->
  list |> MapSet.new() |> MapSet.size() == expected_num
end

find_marker = fn input, expected_num ->
  input
  |> String.to_charlist()
  |> Enum.reduce_while({1, []}, fn char, {idx, chars} ->
    chars = [char | chars] |> Enum.take(expected_num)

    case all_different?.(chars, expected_num) do
      true -> {:halt, idx}
      false -> {:cont, {idx + 1, chars}}
    end
  end)
end
```

```elixir
# Part One
find_marker.(day_6_raw_input, 4)
```

```elixir
# Part Two
find_marker.(day_6_raw_input, 14)
```

## Day 5

```elixir
# Setup
day_5_input =
  day_5_raw_input
  |> String.split("\n")
  |> Enum.reject(&(&1 == ""))

{moves, stacks} = Enum.split_with(day_5_input, &String.starts_with?(&1, "move"))
{_ids, stacks} = List.pop_at(stacks, -1)

cols =
  stacks
  |> Enum.map(fn line ->
    line |> String.to_charlist() |> Enum.chunk_every(4) |> Enum.map(&Enum.at(&1, 1))
  end)
  |> Enum.zip_with(& &1)
  |> Enum.map(fn col -> Enum.reject(col, &(&1 == ?\s)) end)

extract_nums = fn str ->
  Regex.scan(~r/\d+/, str) |> List.flatten() |> Enum.map(&String.to_integer/1)
end
```

```elixir
# Part One
Enum.reduce(moves, cols, fn move, cols ->
  [n1, n2, n3] = extract_nums.(move)
  col_1 = Enum.at(cols, n2 - 1)
  col_2 = Enum.at(cols, n3 - 1)

  {crates, col_1} = Enum.split(col_1, n1)
  col_2 = Enum.reverse(crates) ++ col_2
  cols |> List.replace_at(n2 - 1, col_1) |> List.replace_at(n3 - 1, col_2)
end)
```

```elixir
# Part Two
Enum.reduce(moves, cols, fn move, cols ->
  [n1, n2, n3] = extract_nums.(move)
  col_1 = Enum.at(cols, n2 - 1)
  col_2 = Enum.at(cols, n3 - 1)

  {crates, col_1} = Enum.split(col_1, n1)
  col_2 = crates ++ col_2
  cols |> List.replace_at(n2 - 1, col_1) |> List.replace_at(n3 - 1, col_2)
end)
```

## Day 4

```elixir
# Setup
day_4_input =
  day_4_raw_input
  |> String.split("\n")
  |> Enum.reject(&(&1 == ""))
  |> Enum.map(&String.split(&1, ","))
  |> Enum.map(fn [left, right] ->
    [l1, l2] = String.split(left, "-") |> Enum.map(&String.to_integer/1)
    [r1, r2] = String.split(right, "-") |> Enum.map(&String.to_integer/1)
    {l1, l2, r1, r2}
  end)
```

```elixir
# Part One
contains? = fn {l1, l2, r1, r2} ->
  (r1 >= l1 && r2 <= l2) || (l1 >= r1 && l2 <= r2)
end

Enum.count(day_4_input, &contains?.(&1))
```

```elixir
# Part Two
overlap? = fn {l1, l2, r1, r2} ->
  (l2 >= r1 && l2 <= r2) || (r2 >= l1 && r2 <= l2)
end

Enum.count(day_4_input, &overlap?.(&1))
```

## Day 3

```elixir
# Setup
day_3_input = String.split(day_3_raw_input, "\n") |> Enum.reject(fn line -> line == "" end)

str_to_mapset = fn str ->
  str |> String.graphemes() |> MapSet.new()
end

priority = fn char ->
  <<num::utf8>> = char
  if num > 90, do: num - 96, else: num - 38
end
```

```elixir
# Part One
compartments =
  Enum.map(day_3_input, fn rucksack ->
    half = String.length(rucksack) |> then(&(&1 / 2)) |> round()
    {left, right} = String.split_at(rucksack, half)
    [str_to_mapset.(left), str_to_mapset.(right)]
  end)

shared_items =
  Enum.map(compartments, fn [left, right] ->
    MapSet.intersection(left, right) |> MapSet.to_list() |> hd()
  end)

priorities = Enum.map(shared_items, &priority.(&1)) |> Enum.sum()
```

```elixir
# Part Two
groups = Enum.chunk_every(day_3_input, 3)

priorities =
  Enum.map(groups, fn group ->
    group
    |> Enum.map(&str_to_mapset.(&1))
    |> Enum.scan(&MapSet.intersection/2)
    |> List.last()
    |> MapSet.to_list()
    |> hd()
    |> then(fn item -> priority.(item) end)
  end)

Enum.sum(priorities)
```

## Day 2

```elixir
# Setup
day_2_input =
  day_2_raw_input
  |> String.split("\n")
  |> Enum.reject(fn round -> round == "" end)
  |> Enum.map(&String.split(&1, " "))

# Opponent - Rock: A, Paper: B, Scissors: C
# Myself   - Rock: X, Paper: Y, Scissors: Z
# Outcomes - Loss: X, Draw: Y, Win: Z
outcomes = %{
  ["C", "X"] => "Z",
  ["B", "Z"] => "Z",
  ["A", "Y"] => "Z",
  ["A", "X"] => "Y",
  ["B", "Y"] => "Y",
  ["C", "Z"] => "Y",
  ["A", "Z"] => "X",
  ["B", "X"] => "X",
  ["C", "Y"] => "X"
}

moves =
  outcomes
  |> Enum.map(fn {[their_move, my_move], outcome} -> {[their_move, outcome], my_move} end)
  |> Map.new()

shape_scores = %{"X" => 1, "Y" => 2, "Z" => 3}
outcome_scores = %{"X" => 0, "Y" => 3, "Z" => 6}

outcome = fn round -> Map.get(outcomes, round) end
```

```elixir
# Part One
Enum.reduce(day_2_input, 0, fn [_, my_shape] = round, score ->
  shape_score = Map.get(shape_scores, my_shape)

  outcome = outcome.(round)
  outcome_score = Map.get(outcome_scores, outcome)

  score + shape_score + outcome_score
end)
```

```elixir
# Part Two
Enum.reduce(day_2_input, 0, fn [_their_move, round_outcome] = round, score ->
  my_shape = Map.get(moves, round)
  shape_score = Map.get(shape_scores, my_shape)
  outcome_score = Map.get(outcome_scores, round_outcome)

  score + shape_score + outcome_score
end)
```

## Day 1

```elixir
# Setup
day_1_input =
  day_1_raw_input
  |> String.split("\n")
  |> Enum.map(fn line ->
    case Integer.parse(line) do
      {num, ""} -> num
      :error -> nil
    end
  end)
```

```elixir
# Part One
elves =
  Enum.reduce(day_1_input, {1, 0, 1, 0}, fn calorie, {idx, idx_cal_sum, max_idx, max_cal_sum} ->
    cond do
      calorie == nil ->
        if idx_cal_sum > max_cal_sum do
          {idx + 1, 0, idx, idx_cal_sum}
        else
          {idx + 1, 0, max_idx, max_cal_sum}
        end

      calorie ->
        {idx, idx_cal_sum + calorie, max_idx, max_cal_sum}
    end
  end)
```

```elixir
# Part Two
{_idx, _sum, top_3} =
  Enum.reduce(day_1_input, {1, 0, [{1, 0}]}, fn calorie, {idx, idx_cal_sum, top_3} ->
    cond do
      calorie == nil ->
        new_top_3 =
          [{idx, idx_cal_sum} | top_3] |> Enum.sort_by(&elem(&1, 1), :desc) |> Enum.take(3)

        {idx + 1, 0, new_top_3}

      calorie ->
        {idx, idx_cal_sum + calorie, top_3}
    end
  end)

top_3 |> Enum.map(&elem(&1, 1)) |> Enum.sum()
```
